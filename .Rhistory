library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
library(fulltext)
install.packages("fulltext", dependencies = TRUE)
plot(1:8)
install.packages("STRINGdb", dependencies = TRUE)
BiocManager::install(STRINGdb)
BiocManager::install("STRINGdb")
BiocManager::install("STRINGdb", update = TRUE)
BiocManager::install("STRINGdb", update = TRUE)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager", dependencies = TRUE)
install.packages("BiocStyle", dependencies = TRUE)
STRINGdb::get_STRING_species()
BiocManager::install("STRINGdb")
library(STRINGdb)
sessionInfo()
plot_network("il4")
library(STRINGdb)
plot_network("il4")
library(FactoMineR)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Dynamic selectInput"),
dashboardSidebar(
sidebarMenu(
menuItemOutput("menuitem")
)
),
dashboardBody(
selectInput("heir1","Heirarchy1",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir2","Heirarchy2",c("NONE","A","B","C"),selected="NONE"),
selectInput("heir3","Heirarchy3",c("NONE","A","B","C"),selected="NONE")
)
)
server <- function(input, output, session) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
heirarchy<-c("A","B","C")
observe({
hei1<-input$heir1
hei2<-input$heir2
hei3<-input$heir3
choice1<-c("NONE",setdiff(heirarchy,c(hei2,hei3)))
choice2<-c("NONE",setdiff(heirarchy,c(hei1,hei3)))
choice3<-c("NONE",setdiff(heirarchy,c(hei1,hei2)))
updateSelectInput(session,"heir1",choices=choice1,selected=hei1)
updateSelectInput(session,"heir2",choices=choice2,selected=hei2)
updateSelectInput(session,"heir3",choices=choice3,selected=hei3)
})
}
shinyApp(ui, server)
diag(10)
?svd
svd(diag(10))
library(nbclust)
library(Nbclust)
library(NbClust)
install.packages(NbClust)
install.packages("NbClust", dependencies = TRUE)
library("NbClust")
library(class)
library(MASS)
library(kohonen)
install.packages("kohonen")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(R.matlab)
library(mclust)
library(Rmixmod)
library(aricode)
library(movMF)
library(skmeans)
read_lil_matrix <- function(file_name){
temp <- read.csv(file_name, header = FALSE)
first_split_row <- unlist(strsplit(as.character(temp[1,]), " +", fixed = FALSE))
nrow = as.integer(first_split_row[1])
ncol = as.integer(first_split_row[2])
mat <- matrix(0, nrow = nrow, ncol = ncol)
for(i in 2:dim(temp)[1]){
r_i <- i - 1
split_row <- unlist(strsplit(as.character(temp[i,]), " +", fixed = FALSE))
for(j in seq(2, length(split_row), 2)){
mat[r_i, as.integer(split_row[j])] <- as.integer(split_row[j+1])
}
}
return(mat)
}
#################################################
# Import data
#################################################
fbis <- read_lil_matrix("Dataset_CLUTO/fbis.mat")
fbis_y <- as.factor(as.integer(unlist(read.csv("Dataset_CLUTO/fbis.mat.rclass", header = FALSE))))
re0 <- read_lil_matrix("Dataset_CLUTO/re0.mat")
re0_y <- as.factor(as.integer(unlist(read.csv("Dataset_CLUTO/re0.mat.rclass", header = FALSE))))
tr23 <- read_lil_matrix("Dataset_CLUTO/tr23.mat")
tr23_y <- as.factor(as.integer(unlist(read.csv("Dataset_CLUTO/tr23.mat.rclass", header = FALSE))))
wap <- read_lil_matrix("Dataset_CLUTO/wap.mat")
wap_y <- as.factor(as.integer(unlist(read.csv("Dataset_CLUTO/wap.mat.rclass", header = FALSE))))
run <- function(data, label, verbose=FALSE, no_cluster=NULL){
#data <- type.convert(data)
no_real_cluster <- length(unique(label))
if(is.null(no_cluster)){
no_cluster <- no_real_cluster
}
### 1 ###
cat("=======\n# movMF\n=======\n")
res_models <- c()
methods <- c("Banerjee_et_al_2005","Tanabe_et_al_2007","Sra_2012","Song_et_al_2012","uniroot","Newton","Halley","hybrid","Newton_Fourier")
best_loglike <- NULL
best_partition <- NULL
for(method in methods){
print(method)
temp <- movMF(data, no_cluster, verbose=verbose, control=list(kappa=method, nruns=2))
res <- apply(temp$P, MARGIN=1, FUN=which.max)
res_models <- cbind(res_models, res)
if(is.null(best_loglike) || best_loglike < temp$L){
best_loglike <- temp$L
best_partition <- res
}
}
cat("=======\n# Spherical k-means\n=======\n")
temp <- skmeans(data, k = no_cluster, control=list(nruns=1))
res_models <- cbind(res_models, temp$cluster)
print(dim(res_models))
### 2 ###
#cat("=======\n# Best movMF\n=======\n")
#temp <- movMF(data, no_cluster, verbose=verbose, nruns=10)
#res_vMF <- apply(temp$P, MARGIN=1, FUN=which.max)
res_vMF <- best_partition
#cat("=======\n# Best Gaussian\n=======\n")
#res_mclust <- Mclust(data, G=no_cluster)$classification
### 3 ###
cat("=======\n# Consensus\n=======\n")
res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = no_real_cluster, models=mixmodMultinomialModel(), dataType="qualitative")
#cat("##############\n# Best Gaussian\n##############\n")
#cat("NMI: ", NMI(as.factor(res_mclust), as.factor(label)), "\n")
#cat("ARI: ", ARI(as.factor(res_mclust), as.factor(label)), "\n")
#cat("##############\n# Best movMF\n##############\n")
#cat("NMI: ", NMI(as.factor(res_vMF), as.factor(label)), "\n")
#cat("ARI: ", ARI(as.factor(res_vMF), as.factor(label)), "\n")
#cat("##############\n# Consensus\n##############\n")
#cat("NMI: ", NMI(as.factor(res_mixmod@bestResult@partition), as.factor(label)), "\n")
#cat("ARI: ", ARI(as.factor(res_mixmod@bestResult@partition), as.factor(label)), "\n")
return(res_mixmod@bestResult@partition)
}
run_many <- function(data, label, verbose=FALSE, no_cluster=NULL){
best_nmi <- 0
best_ari <- 0
for(i in 1:10){
res <- run(data, label, verbose=verbose, no_cluster=no_cluster)
nmi <- NMI(as.factor(res), as.factor(label))
ari <- ARI(as.factor(res), as.factor(label))
if(mean(c(best_nmi, best_ari)) < mean(c(nmi, ari))){
best_ari <- ari
best_nmi <- nmi
print(best_nmi)
print(best_ari)
}
}
print(best_nmi)
print(best_ari)
}
run_many(fbis, fbis_y, no_cluster=12)
run_many(tr23, tr23_y, no_cluster=12)
run_many(tr23, tr23_y, no_cluster=12)
run_many(tr23, tr23_y, no_cluster=12)
run_many(tr23, tr23_y, no_cluster=12)
